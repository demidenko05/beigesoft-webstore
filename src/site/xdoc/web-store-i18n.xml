<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Beigesoft ™ WEB Store specification</title>
   </properties>

  <body>

    <section name="Beigesoft ™ WEB Store specification #1. Internationalization.">
      
      <h5>This is internationalization specification for whole project Beigesoft ™ Accounting All In one include subprojects.</h5>
      <h5>Javascript internationalization is implemented by using file <b>beige.i18n.${lang}.js</b> that must be present for the languages!!!</h5>
      
      <h4>Internationalization.</h4>
      <p>The best method to store user I18N preferences is browser's cookie. I18N preferences is usually bundle
       <ul>
         <li>language</li>
         <li>decimal and decimal group separators</li>
       </ul>
       But sometimes user want to change only language. User also can prefer other decimal separators (not from bundle).
       Consequently using three cookies "lang", "dseparator" and "dgseparator" is the best choice.
      </p>
      <p>It can be extended with storing preferences in database for registered users.</p>
      <p>Persistable model org.beigesoft.persistable.AI18nFeature:
        <ul>
          <li>AHasIdStringVersion fields, itsId - String(6), itsVersion - changed time algorithm</li>
          <li>itsName - String</li>
        </ul>
      </p>
      <p>Persistable model org.beigesoft.persistable.Languages contains all possible values:
        <ul>
          <li>AI18nFeature fields, PK is code e.g. "en" or "ru"</li>
        </ul>
      </p>
      <p>Persistable model org.beigesoft.persistable.Countries contains all possible values:
        <ul>
          <li>AI18nFeature fields, PK is code e.g. "US" or "RU"</li>
        </ul>
      </p>
      <p>Persistable model org.beigesoft.persistable.DecimalSeparator contains all possible values:
        <ul>
          <li>AI18nFeature fields, PK is code e.g. "." or ","</li>
        </ul>
      </p>
      <p>Persistable model org.beigesoft.persistable.DecimalGroupSeparator contains all possible values:
        <ul>
          <li>AI18nFeature fields, PK is code e.g. "space" or "'". To avoid problems space " " is substituted with its name "space" in English.</li>
        </ul>
      </p>
      <p>Persistable model org.beigesoft.persistable.LangPreferences:
        <ul>
          <li>itsVersion - Long change time</li>
          <li>lang - Languages</li>
          <li>country - Countries</li>
          <li>decimalSep - DecimalSeparator</li>
          <li>decimalGroupSep - DecimalGroupSeparator</li>
          <li>digitsInGroup - Integer, digits in group e.g. 2 for "1 21 23,90", default 3</li>
          <li>isDefault - Boolean, false default</li>
        </ul>
        Pair[lang, country] is PK. This model holds default preferences for countries in the database and user preferences for its request.
      </p>
      <p>Parameters Map&lt;String, Object&gt; is used to pass request scoped variables through chain of services (SrvOrm, Processor, etc.).
        This map is passed as request attribute "reqVars". All I18N variables are put into that map to use in services and views like PDF.</p>
      <p>
        At the first client request javax.servlet.ServletRequest.getLocale() gets preferred client locale (language and country)
        then program responds with cookies filled from the same LangPreferences or default if there is no such localization (messages for this language).
        Program also sets request variables lang, dseparator, dgseparator, languages, decimalGroupSeparators and decimalSeparators to JSP that will handles language, separator view and form to change user preferences.
        Program also sets request variables dseparatorv, dgseparatorv where "space" is substituted with " ".
        For further requests langPreferences will be filled with cookies that user can change.
        In browser decimal separators is handled by JQuery plugin "autoNumeric.js" then form sends exactly formatted value,
        e.g. "12'123,13", where "'" group separator and "," decimal one.
        Converter CnvTfsBigDecimal will replace separators (according reqVars["dseparatorv"], etc.) then passes standard value ("13123.13" in this case) to the constructor.
      </p>
      <p>Service transactional org.beigesoft.handler.HndlI18nRequest handles server-side logic above. It caches lists of LangPreferences, DecimalGroupSeparator, DecimalSeparator, Languages and implements IHandlerDataChanged,
        so a service that changes any entity (LangPreferences, Languages...) should invoke listeners to refresh cache.
        Servlet get this handler from factory by name "hndlI18nRequest" and invokes it first thing.
      </p>

      <h4>Advanced internationalization</h4>
      <p>International trading requires advanced internationalization - names of goods, services, catalogs, etc.
        And so does selling to foreign tourists.
      </p>
      <p>Persistable model org.beigesoft.persistable.AI18nName:
        <ul>
          <li>itsVersion - Long change time</li>
          <li>itsName - String, name in the language</li>
        </ul>
      </p>
      <h4>Advanced accounting internationalization:</h4>
      <p>
        Advanced I18N fields in accounting persistable models:
        <ul>
          <li>AccSettings.useCurrencySign - Boolean, default false, if uses currency sign in reports (e.g. $), otherwise itsName (e.g. USD).</li>
          <li>AccSettings.printCurrencyLeft - Boolean, default false, if print currency on left of amount e.g. "1,356.12$" or "$1,356.12".</li>
          <li>DebtorCreditor.nativeName - String, nullabe,  .</li>
        </ul>
      </p>
      <p>
        Persistable model org.beigesoft.accounting.persistable.I18nAccounting:
        <ul>
          <li>itsVersion - Long change time</li>
          <li>lang - Languages, the language, PK</li>
          <li>organizationName - String, not null, organization name in the language. It's to report financial statements in foreign language, e.g. balance sheet for foreign investors, translated invoices for overseas buyers, etc...</li>
          <li>regAddress1 - String, if exist</li>
          <li>regAddress2 - String, if exist</li>
          <li>regCountry - String, if exist</li>
          <li>regState - String, if exist</li>
          <li>regCity - String, if exist</li>
        </ul>
      </p>
      <p>
        Persistable model org.beigesoft.accounting.persistable.I18nBuyer (for I18N of overseas sales invoice):
        <ul>
          <li>buyer - DebtorCreditor, PK</li>
          <li>itsVersion - Long change time</li>
          <li>itsName - String, not null, name of buyer in native language</li>
          <li>regAddress1 - String, if exist</li>
          <li>regAddress2 - String, if exist</li>
          <li>regCountry - String, if exist</li>
          <li>regState - String, if exist</li>
          <li>regCity - String, if exist</li>
        </ul>
      </p>
      <p>Persistable model org.beigesoft.accounting.persistable.I18nUnitOfMeasure (for I18N of overseas sales invoice):
        <ul>
          <li>AI18nName columns</li>
          <li>lang - Languages, the language</li>
          <li>hasName - UnitOfMeasure - internationalized thing</li>
        </ul>
        Pair[lang, hasName] is PK.
      </p>
      <p>Persistable model org.beigesoft.accounting.persistable.I18nInvItem:
        <ul>
          <li>AI18nName columns</li>
          <li>lang - Languages, the language</li>
          <li>hasName - InvItem - internationalized thing</li>
        </ul>
        Pair[lang, hasName] is PK.
      </p>
      <p>Persistable model org.beigesoft.accounting.persistable.I18nCurrency:
        <ul>
          <li>AI18nName columns</li>
          <li>lang - Languages, the language</li>
          <li>hasName - Currency - internationalized thing</li>
          <li>useCurrencySign - Boolean, default false, if uses currency sign in reports (e.g. $), otherwise itsName (e.g. USD).</li>
          <li>printCurrencyLeft - Boolean, default false, if print currency on left of amount e.g. "1,356.12$" or "$1,356.12".</li>
        </ul>
        Pair[lang, hasName] is PK.
      </p>
      <p>Persistable model org.beigesoft.accounting.persistable.I18nServiceToSale:
        <ul>
          <li>AI18nName columns</li>
          <li>lang - Languages, the language</li>
          <li>hasName - ServiceToSale - internationalized thing</li>
        </ul>
        Pair[lang, hasName] is PK.
      </p>
      <h4>Advanced Web-Store Internationalization:</h4>
      <p>
        Advanced I18N fields in trading persistable models:
        <ul>
          <li>TraidingSettings.useAdvancedI18n - switches using advanced internationalization for performance purposes.</li>
        </ul>
      </p>
      <p>
        Persistable model org.beigesoft.webstore.persistable.I18nWebStore:
        <ul>
          <li>itsVersion - Long change time</li>
          <li>lang - Languages, the language, PK</li>
          <li>webStoreName - String, not null, WS name in the language</li>
        </ul>
      </p>
      <p>Persistable model org.beigesoft.webstore.persistable.I18nCatalogGs:
        <ul>
          <li>AI18nName columns</li>
          <li>lang - Languages, the language</li>
          <li>hasName - CatalogGs - internationalized thing</li>
        </ul>
        Pair[lang, hasName] is PK.
      </p>
      <p>Persistable model org.beigesoft.webstore.persistable.I18nSpecificsOfItem:
        <ul>
          <li>AI18nName columns</li>
          <li>lang - Languages, the language</li>
          <li>hasName - SpecificsOfItem - internationalized thing</li>
        </ul>
        Pair[lang, hasName] is PK.
      </p>
      <p>Persistable model org.beigesoft.webstore.persistable.I18nChooseableSpecifics:
        <ul>
          <li>AI18nName columns</li>
          <li>lang - Languages, the language</li>
          <li>hasName - ChooseableSpecifics - internationalized thing</li>
        </ul>
        Pair[lang, hasName] is PK.
      </p>
      <p>ItemInList.specificInList contains of "cached" item's specifics for default language.
        Persistable model org.beigesoft.webstore.persistable.I18nSpecificInList holds i18n values:
        <ul>
          <li>itsVersion - Long change time</li>
          <li>itemId - Long, Goods/Service/SEGoods/SEService ID, not null</li>
          <li>itsType - EShopItemType, Goods/Service/SEGoods/SEService, not null.</li>
          <li>lang - Languages, the language</li>
          <li>specificInList - String, not null, specifics in the language</li>
        </ul>
        Triple [itemId, itsType, lang] is PK.
      </p>
      <p>If TraidingSettings.useAdvancedI18n==true and client prefers non-default language, then catalog's service creates clone from cached catalog and substitute names with cached I18nCatalogGs ones.</p>
      <p>In that case item list is made with extended query, e.g. for goods list:
<pre style="white-space: pre-wrap;">
select ALLGOODS.ITSTYPE, ALLGOODS.ITEMID, IMAGEURL, ITSPRICE, PREVIOUSPRICE, AVAILABLEQUANTITY, ITSRATING, DETAILSMETHOD,
case when I18NINVITEM.ITSNAME is null then ALLGOODS.ITSNAME else I18NINVITEM.ITSNAME end as ITSNAME,
case when I18NSPECIFICINLIST.SPECIFICINLIST is null then ALLGOODS.SPECIFICINLIST else I18NSPECIFICINLIST.SPECIFICINLIST end as SPECIFICINLIST
from (
  select ITSTYPE, ITEMID, ITSNAME, IMAGEURL, SPECIFICINLIST, ITSPRICE, PREVIOUSPRICE, AVAILABLEQUANTITY, ITSRATING, DETAILSMETHOD
  from ITEMINLIST
  where AVAILABLEQUANTITY>0 and ITSTYPE=0
 ) as ALLGOODS
join (
  select distinct GOODS as GOODSINCATALOG from GOODSCATALOGS where ITSCATALOG in (1,2,3,4,5)
 ) as GOODSINCATALOGALL on GOODSINCATALOGALL.GOODSINCATALOG=ALLGOODS.ITEMID
left join (
  select * from I18NINVITEM
  where LANG='ru' 
) as I18NINVITEM on I18NINVITEM.HASNAME=ALLGOODS.ITEMID
left join (
  select * from I18NSPECIFICINLIST
  where LANG='ru' and ITSTYPE=0
) as I18NSPECIFICINLIST on I18NSPECIFICINLIST.ITEMID=ALLGOODS.ITEMID
</pre>
      </p>
      <p>Chooseable specifics of item that has non-null StringValue1, e.g. unit of measure may has prefix "i18n_", e.g. "i18n_Inch", that will be replaced by regular SrvI18n.</p>
      <p>Specifics of type "FILE_EMBEDDED" e.g. "Embedded HTML" StringValue4 holds comma-separated languages codes (without default) for existing files, e.g. "ru,fr,it",
        StringValue1 contains of URL for default language, other files should has language suffix,
        e.g. StringValue1="static/uploads/1524298538401googs126e1.html", StringValue4="ru,fr",
        so files must exist: "static/uploads/1524298538401googs126e1_ru.html" and "static/uploads/1524298538401googs126e1_fr.html".</p>
      <p>
        <h4>All request scoped I18N and other variables (include Accounting and Web-Store) that passed to JSP in reqVars:</h4>
        <ul>
          <li>dseparator - String, decimal separator e.g. "."</li>
          <li>dseparatorv - String, decimal separator reformed e.g. "."</li>
          <li>dgseparator - String, decimal group separator e.g. "space"</li>
          <li>dgseparatorv - String, decimal group separator reformed e.g. " "</li>
          <li>digitsInGroup - Integer, digits in group e.g. 2 for "1 21 23,90"</li>
          <li>lang - String, language code e.g. "en"</li>
          <li>langDef - String, default language code e.g. "en"</li>
          <li>languages - List&lt;Languages&gt; languages list</li>
          <li>decimalSeparators - List&lt;DecimalSeparator&gt; decimal separators list</li>
          <li>decimalGroupSeparators - List&lt;DecimalGroupSeparator&gt; decimal separators list</li>
          <li>countryFlag - String, country flag code, may be omitted, e.g. "us" for language "en"</li>
          <li><b>Real values is implemented by accounting (if where is no farther sub-handler then they will be set to default):</b></li>
          <li>quantityPrecision - Integer, quantity precision (decimal places after dot) default "2" for "1 243.34"</li>
          <li>pricePrecision - Integer, price precision (decimal places after dot) default "2" for "1 243.34"</li>
          <li>costPrecision - Integer, cost precision (decimal places after dot) default "4" for "1 243.3491"</li>
          <li><i>to set precision and rounding mode by JavaScript for elements with class - ".autoNum[precision]":</i></li>
          <li>RSisUsePrecision0/1/2/3/4 - Boolean, if uses precision (decimal places after dot), true by default.</li>
          <li>RSmRound - String, rounding mode in autonumeric standard, "S" - Half-Up (default), "s" - Half-Down, "B" - Half-EVEN, "U" - Up, "D" - Down, "C" - celling, "F" - floor.</li>
          <li><i>may be null (empty/omitted):</i></li>
          <li>isIncludedSalesTaxForSales - Boolean if included sales taxes in price for sales, for implementing/highlighting total without/with taxes logic</li>
          <li>isIncludedSalesTaxPurchases - Boolean if included sales taxes in price for purchases, for implementing/highlighting total without/with taxes logic</li>
          <li>curSign - default currency sign, e.g. "USD" or "$"</li>
          <li><b>Accounting additions (made by accounting sub-handler):</b></li>
          <li>balancePrecision - Integer, balance precision (decimal places after dot) e.g. "2" for "1 243.34"</li>
          <li>i18nAccounting - I18nAccounting in current lang if lang != langDef</li>
          <li>i18nCurrency - I18nCurrency in current lang if lang != langDef</li>
          <li><b>Web-Store additions (made by web-store sub-handler):</b></li>
          <li>i18nWebStore - I18nWebStore in current lang if lang != langDef</li>
        </ul>
      </p>
    </section>

  </body>

</document>
