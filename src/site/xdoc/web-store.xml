<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Beigesoft™ WEB Store specification #1.</title>
   </properties>

  <body>

    <section name="Beigesoft™ WEB Store specification #1.">

      <h4>Goals And Requirements.</h4>
      <p>* It is embedded in Beige-Accounting (database and WEB-app). So it's no need to import/export data.</p>
      <p>* It must be cross-browser app bootstrap/jquery based.</p>
      <p>* It must be mobile adapted.</p>
      <p>* It must be as multipurpose as possible.</p>
      <p>* It must implements pricing methods based on:
        <ul>
          <li>Customer's price category, i.e. fixed price different for different customers</li>
          <li>Goods price category, used in BI</li>
          <li>Auctioned merchandise/service</li>
        </ul>
      </p>
      <p>* It can be used as well for small catalog of goods or/and services as for large one (thousands products).
        E.g. for "Flower shop" with 15 goods and 3 services in single page
        or "Electronic store" with 4235 goods of 24 categories and 234 subcategories.</p>
      <p>* Goods/service info (specifics) should be flexible and efficient-usable (for "filtering", "on line advising" and farther business intelligence).
        E.g. goods specifics like "Image", "Producer", "Weight", "Dimension".
        A product future can be represent either as "text", or "number" or "link" or "image" or "file" (e.g. brochure).
      </p>
      <p>* It can be used to sold items that has non-integer quantity, e.g. 45.15 pounds or 11.25 metres.</p>
      <p>* It should be rating for goods/services and someone else sellers.</p>
      <p>* Goods may be from own warehouse (owned or not) or offered by other seller.
        For example cars auction there cars belongs to other owners. And so does services e.g. rent room in hotels/apartments.
        For goods/services that belongs to someone else business owner take interest from purchase's amount.
        Such goods/services called <b>SeGoods</b> and<b>SeService</b> and their owners called <b>SeSeller</b>..</p>
      <p>* It should be "pick date" - date that customer want to take ordered goods/service either by he-self or by delivery.
      It is optional. It can be used even to make appointment to a hairdresser. It's tied with "Availability".</p>
      <p>* It should be methods that handle "Available [N] since [time]" goods or services,
        and <b>Always available since [time]</b>. 
        E.g. at 25 Dec customers ordered 233 "pizza with bacon", but "the store" can make only 200,
        and same for available services e.g. make appointment to a hairdresser, booking a hotel room and advised always available food and beverage.</p>
      <p>* It should implements widely used "goods/services seen history"
        - several (e.g. up to 8) last goods that customer just has seen.</p>
      <p>* It should use for authentication any public account (Facebook etc.).</p>
      <p>* It should be stored customer history to allow customer repeat order.</p>
      <p>* It should implements "advising goods or services for chosen goods or service"
        e.g. "nice packaging #3 for 2USD" for "bunch of roses #122 for 13 USD", cover for cell-phone or
        offer transfer, food and beverage  after booking room.</p>
      <p>* It should be bulk operations for filtered products, e.g. apply increase price for chosen set of goods.</p>
      
      <h4>Detailed specifications:</h4>
      <h4><a href="web-store-catalog.html">Catalog of goods/services.</a></h4>
      <h4><a href="web-store-gs-specifics.html">Good/service specifics.</a></h4>
      <h4><a href="web-store-gs-detail.html">Detail view of good/service.</a></h4>
      <h4><a href="web-store-filtering.html">Filtering/ordering list of goods/services.</a></h4>
      <h4><a href="ws-sell-service.html">Services selling.</a></h4>
      <h4><a href="web-store-i18n.html">Internationalization.</a></h4>
      <h4><a href="ws-se-selling.html">Selling goods or services by something else seller.</a></h4>
      <h4><a href="web-store-cart.html">Shopping cart.</a></h4>
      
      <h5>Persistable entities located in <b>org.beigesoft.webstore.persistable</b> package.</h5>

      <h4>Persistable model TradingSettings</h4>
      <p>It consist of:
        <ul>
          <li>itsId - Long, Not Null, PK, where is only record with itsId=1</li>
          <li>itsVersion - Version, changed time algorithm.</li>
          <li>isGoodsStore - Boolean, Not Null, default true, is it store of goods, it will reflect to menu and which data will be requested from database</li>
          <li>isServiceStore - Boolean, Not Null, default false, is it store of services, it will reflect to menu and which data will be requested from database.</li>
          <li>isSeGoodsStore - Boolean, Not Null, default false, is it store of S.E. goods, it will reflect to menu and which data will be requested from database</li>
          <li>isSeServiceStore - Boolean, Not Null, default false, is it store of S.E. services, it will reflect to menu and which data will be requested from database.</li>
          <li>isUseAuction - Boolean, Not Null, default false, is use auction</li>
          <li>isShowLogo - Boolean, Not Null, default true, is show file static/img/logo-web-store.png in the top menu</li>
          <li>webStoreName - String, name that will be appeared in the top menu (if present)</li>
          <li>isUseGoodsAdvising - Boolean, Not Null, default false, is use goods advising.</li>
          <li>isUseServicesAdvising - Boolean, Not Null, default false, is use services advising.</li>
          <li>isUseSeenHistory - Boolean, Not Null, default false, is use "goods/services seen history".</li>
          <li>isUsePriceForCustomer - Boolean, Not Null, default false, if use <b>Price for customer</b> method</li>
          <li>defaultCustomerCategory - DebtorCreditorCategory, not null, default category for newly created DebtorCreditor for new OnlineBuyer</li>
          <li>rememberUnauthorizedUserFor - Integer remember unauthorized user for N days, 0 default, not null - for BI and advertising</li>
          <li>maxQuantityOfTopLevelCatalogs - Integer, not null, default 5, maximum quantity of top level catalogs shown in menu,
            others will be in drop-down menu "others"</li>
          <li>itemsPerPage - Integer, Not null, default 50</li>
          <li>maxQuantityOfBulkItems - Integer, Not null, default 50, maximum quantity of bulk operated items.</li>
          <li>catalogOnStart - CatalogGs, nullable, In case of little catalog to list all goods/services on start without clicking on "menu-[catalog]",
            or it's catalog that offers different goods/services for all on start.</li>
          <li>columnsCount - Integer, not null, default 2, items list columns count.</li>
          <li>isCreateOnlineUserOnFirstVisit - Not null, whether create online user on first visit if there is no
            cookie "cUserId" and of course user unauthorized. False by default,
            otherwise it used for BI and tracking unauthorized users who even did not
            added any item to cart for farther suggesting goods.</li>
          <li>isUsedSeveralPaymentMethods - Boolean, false default. False means that web-store used only payment method,
        and consequently no need to divide customer order. Usually it's online payment.
        For small shop or service maker payment usually made by cash.</li>
          <li>defaultPaymentMethod - EPaymentMethod, not null, ONLINE default. </li>
          <li>txExcl - Boolean, If taxes excluded in price, default FALSE (included).</li>
          <li>sevPlac - Boolean, If any item can be in several place, default FALSE (only place).</li>
          <li></li>
        </ul>
        The most settings reflects to menu (enabled features) and performance in some cases(e.g. if it used price for customer then additional query used).
      </p>
      
      <h4>Web-store administrator.</h4>
      <p>To isolate web-store information resources from accounting ones,
        there are dedicated to web-store administrator resources:
        <ul>
          <li>WWaService - servlet that serve WA requests, URL=<b>/webadmin/service</b></li>
          <li>HndlEntitiesReq (name hndlWaEntitiesReq) - only request handler that handle all things - I18N vars...</li>
          <li>PrcEntitiesPage (name waPrcEntitiesPage) - to serve page with only web-store's entities.</li>
        </ul>
        Only users with JEE role <b>admin</b> have access to these resources.
        To prevent changing S.E.seller entities, service <b>HldTradeEntitiesProcessorNames</b> returns <b>null</b> for any S.E. entity and modify actions.
      </p>
      
      <h4>Persistable model SettingsAdd</h4>
      <p>
        <ul>
          <li>AHasIdLongVersion fields (ID by hand)</li>
          <li>recordsPerTransaction - Integer not null,  Records per transactions for bulk operations</li>
          <li>minimumListSizeForOrdering - Integer, not null, default 20, minimum list size for enable ordering.</li>
        </ul>
      </p>

      <h4>Goods/seller rating</h4>
      <p>It's used standard rating from 0 to 10 with 5 stars appearance (include half star),
        e.g. 10 appeared as whole 5 stars, 5 appeared as 2 whole stars, 1 one half star and 2 empty stars.
      </p>
      
      <h4>Goods rating</h4>
      <p>Persistable model GoodsRating:
        <ul>
          <li>goods - InvItem, PK</li>
          <li>averageRating - Integer, 0..10, if exist.</li>
        </ul>
      </p>
[db c f]      <p>Persistable model BuyerGoodsRating (buyer rates goods):
        <ul>
          <li>goods - InvItem, not null</li>
          <li>buyer - OnlineBuyer, not null</li>
          <li>itsRating - Integer, 0..10, default=0, not null.</li>
          <li>description - String</li>
        </ul>
        Pair {goods, buyer} is PK.
      </p>

      <h4>SeSellers rating</h4>
[db][c]      <p>Persistable model SeSellerRating:
        <ul>
          <li>seSeller - SeSeller, PK</li>
          <li>averageRating - Integer, 0..10, if exist.</li>
        </ul>
      </p>
[db c f]      <p>Persistable model BuyerSeSellerRating:
        <ul>
          <li>seSeller - SeSeller, not null</li>
          <li>buyer - OnlineBuyer, not null</li>
          <li>itsRating - Integer, 0..10, default=0, not null.</li>
          <li>description - String</li>
        </ul>
        Pair {seSeller, buyer} is PK.
      </p>

      <h4>Pricing for standard selling (non-auction)</h4>
      <p>There is three pricing methods:
        <ol>
          <li>a goods has same price for all customers <b>Price for all</b></li>
          <li>a goods price depends of customer's category <b>Price for customer</b></li>
          <li><b>Discount for customer</b> it may be used together with
            either <b>Price for all</b> or additionally to <b>Price for customer</b></li>
        </ol>
        TradingSettings.isUsePriceForCustomer is flag for elected method.
      </p>
      <p>Implementation of "Price depends of time" method.
      For example delivering at night or daylight hours. Reliable method - schedule bulk price setting.
[p c]        It's should be a scheduler thread that checks tasks that must be invoked at chosen time.
  Scheduler for paid software version, manually invocation for free one.</p>
(DB_CHECKED+)      <p>Model GoodsPrice:
        <ul>
          <li>goods - InvItem, not null</li>
          <li>priceCategory - PriceCategory, not null</li>
          <li>itsPrice - BigDecimal, not null, if auctioned then start price or current bid, otherwise just price</li>
          <li>previousPrice - BigDecimal, it can be used to implements widely used method "Price has been reduced",
            i.e. previousPrice = 60 against itsPrice = 45.</li>
            priceCategory used for BI and may be used in filter for method <b>Price for customer</b>
        </ul>
        Pair {"goods", "priceCategory"} is PK.<br></br>
        In case <b>Price for all</b> every goods has only GoodsPrice, otherwise GoodsPrice should be for every PriceCategoryOfBuyer.<br></br>
        Bulk operations for filtered GoodsPrice:
        <ul>
          <li>delete</li>
          <li>assign another priceCategory</li>
          <li>assign another price (too mistakable operation!)</li>
          <li>change price plus/minus amount</li>
          <li>change price plus/minus percentage</li>
        </ul>
        * all bulk operations can cause "store is out of order" in case wrong changes, so it should be steps:
        <ol>
          <li>disable web-store for customers</li>
          <li>backup web-store</li>
          <li>bulk changes</li>
          <li>checking phase</li>
          <li>enable web-store for customers</li>
        </ol>
      </p>
      <p>Model PriceCategory:
        <ul>
          <li>AHasNameIdLongVersion fields (ID by hand)</li>
          <li>priceCategoryGoods - PriceCategory, not null, e.g. "cheap goods"</li>
          <li>priceCategoryCustomer - PriceCategoryOfBuyer, e.g. "rich", if null then used "Price for all"</li>
          <li>description - String.</li>
        </ul>
      </p>
      <p>Model PriceCategory:
        <ul>
          <li>AHasNameIdLongVersion fields</li>
          <li>description - String.</li>
        </ul>
      </p>
      <p>Model PriceCategoryOfBuyer:
        <ul>
          <li>AHasNameIdLongVersion fields</li>
          <li>description - String.</li>
        </ul>
      </p>

      <h5>Price for customer</h5>
      <p>TradingSettings.isUsePriceForCustomer=true. All customers mast have BuyerPriceCategory.</p>
      <p>Model BuyerPriceCategory:
        <ul>
          <li>buyer - OnlineBuyer, not null</li>
          <li>priceCategory - PriceCategory, not null</li>
        </ul>
        Pair {"buyer", "priceCategory"} is PK.
      </p>
      <p>In that way <b>PriceCategory</b> reflect to both "Goods Price Category" and "Customer Price Category" e.g.:
        <ul>
          <li>newbie cheap goods</li>
          <li>newbie expensive goods</li>
          <li>rich_a cheap goods</li>
          <li>rich_a expensive goods</li>
          <li>poor_a cheap goods</li>
          <li>poor_a expensive goods</li>
          <li>and so on ...</li>
        </ul>
        And SQL query is not too expensive for this method e.g. a customer has two price categories #12 and #13:
        <pre>
          ... join GoodsPrice ... where GoodsPrice.priceCategory in (12, 13) ...
        </pre>
        A customer must has no mixed PriceCategory dedicated to different "customer category" e.g. "newbie cheap goods" and "rich_a expensive goods"
        And so does goods i.e. "rich_a expensive goods" and "newbie cheap goods".<br></br>
[c]        Software will check it during insert/update.
[c]        Software will check possibility of change TradingSettings.isUsePriceForCustomer, at first all records <b>PriceCategory</b> must be edited/deleted for new profile.
      </p>

      <h5>Price same for all customers</h5>
      <p>TradingSettings.isUsePriceForCustomer=false. All customers must have no BuyerPriceCategory and all goods must have PriceCategory with priceCategoryCustomer=null.
        In that way <b>PriceCategory</b> reflect only to "Goods Price Category" and used only for BI e.g.:
        <ul>
          <li>cheap food</li>
          <li>expensive food</li>
          <li>expensive smartphones</li>
        </ul>
        And SQL query is extremely cheap without filtering price category for customer.
      </p>
      
      <p>Business services must use TradingSettings.isUsePriceForCustomer to validate if data consistent, e.g. in case
      TradingSettings.isUsePriceForCustomer=false any goods must has only price category with empty "customer price category".</p>

      <h5>Discount for customer</h5>
      <p>A customer may has a discount (obtained as gift or by other way) that can be applied for
        set of "PriceCategory" (e.g. "unexpensive notebooks").</p>
      <p>Model DiscountForCustomer:
        <ul>
          <li>customer - DebtorCreditor, not null</li>
          <li>priceCategory - PriceCategory, not null</li>
          <li>discountPercentage - BigDecimal, not null</li>
          <li>discountAmount - BigDecimal, not null</li>
          <li>description - String.</li>
        </ul>
        Pair {"customer", "priceCategory"} is PK.
      </p>
      
      <h5>Pricing of services</h5>
      <p>In same way pricing designed to ServiceToSale.</p>

      <h4>Auctioning</h4>
      <p>Any goods/services can be sold in auction.
        It also can be sold for fixed price during auction.
      </p>
      <p>Persistable model GoodsAuction:
        <ul>
          <li>goods - PK</li>
          <li>dateStart - Date, not null, date start.</li>
          <li>dateEnd - Date, not null, date end.</li>
          <li>startPrice - BigDecimal, Not null, start price.</li>
          <li>minimumPrice - BigDecimal, Not null, minimum price that seller will accept.</li>
          <li>buyItNowPrice - BigDecimal, buy it now price, if applied.</li>
          <li>currentPrice - BigDecimal, Not null, default=0, current price.</li>
          <li>soldPrice - BigDecimal, if sold.</li>
          <li>totalBids - Integer, Not null, default=0, totalBids.</li>
          <li>isEnded - Boolean, not null, default=false</li>
          <li>isSold - Boolean, not null, default=false</li>
        </ul>
        For improving performance:
        <ul>
          <li>only record for goods exist</li>
          <li>it contains of last auction data</li>
          <li>it can be reused, i.e. start new auction</li>
        </ul>
        If goods sold in auction then "CustomerOrder" will created, otherwise "GoodsAuctionUnsold" created.
      </p>

      <h4>Advising goods or services for chosen goods or service</h4>
      <p>Services/goods that has price but has no any CatalogCategory with ECatalogCategory.Catalog[N] are not shown in store catalog
      but can be offered additionally to chosen goods/service. And so for "on-catalog" goods/services.</p>
      <p>Advising happen after customer pick a goods/service. It should be button "show/hide advising".</p>
      <p>Advising should take account of "ExpensiveCategory" i.e. is it cheap or expensive goods.</p>
      <p>Model AdvisedGoodsForGoods:
        <ul>
          <li>forAdviseCategory - AdviseCategoryOfGs, not null, for goods advise category,
          e.g. "smartphones 5inch 2*3".</li>
          <li>advisedCategory - AdviseCategoryOfGs, not null, goods advised category,
          e.g. "covers for smartphones 5inch 2*3".</li>
          <li>description - String.</li>
        </ul>
        pair {forAdviseCategory, toAdviseCategory} is PK.
      </p>
      <p>Model AdviseCategoryOfGs:
        <ul>
          <li>AHasNameIdLongVersion fields (ID by hand)</li>
          <li>description - String.</li>
        </ul>
      </p>
      <p>Model GoodsAdviseCategories:
        <ul>
          <li>adviseCategory - AdviseCategoryOfGs, not null.</li>
          <li>goods - InvItem, not null.</li>
        </ul>
        Bulk operations for filtered GoodsAdviseCategories:
        <ul>
          <li>delete</li>
          <li>assign another AdviseCategoryOfGs</li>
        </ul>
      </p>

      <h4>Goods/services seen history</h4>
      <p>Model BuyerGoodsSeen used for advising and BI:
        <ul>
          <li>buyer - OnlineBuyer, not null.</li>
          <li>goods - InvItem, not null.</li>
          <li>dateSeen - Date, not null.</li>
        </ul>
        Pair {"buyer", "goods"} is PK.
      </p>
      
      
      <h4>Data consistence</h4>
      <p>Here is used the cheap transaction isolation method "read uncommitted".
        A goods may be sold either in standard way or in auction.
        To prevent "phantom read" when one transaction makes GoodsPrice (standard selling) and another
        makes GoodsAuction (auction selling) at same time, service must update shared the goods record.
        For example transactionA set "GoodsAuction":
        <ol>
          <li>Start transaction</li>
          <li>Read (refresh) goods</li>
          <li>Check that "there is no any GoodsPrice for this goods", if exist then rollback transaction</li>
          <li>insert "GoodsAuction"</li>
          <li>update goods, just for version dirty check</li>
          <li>Commit transaction</li>
        </ol>
        So if another "set GoodsPrice for this goods" transactionB has been committed before this one,
        then dirty check exception (updated goods's version has been changed) cause roll back transactionA.
      </p>

      <h4>Goods return</h4>
[p]      <p>Many countries have similar "Goods return Law".
        This operation is performed by accounting document "Sales return".
        S.E.seller should handle it by himself.
      </p>

      <h4>Availability of goods.</h4>
      <p>Implements business logic:
        <ol>
          <li>[N] of goods is available at [place] since [date]</li>
          <li>goods always available at [place] since [date],
            this is simplest method when seller is ensured that he can handle all received orders.</li>
        </ol>
        [N] is increased by a supply service (goods that arrived or manufactured).<br></br>
        [N] is decreased by a customer purchase service (cart checkout) (if not always AV).
      </p>
      <p>
        To improve performance availability information (include filter that buyer choose) are passed during action adding goods to cart.
        So user can't order quantity that exceed the rest.
        During checkout goods availability may has changed
        by another purchase, so customer will be asked about change quantity and he can accept it (decrease/remove items from cart) or not.
      </p>
      <p>
[p]        To implements business logic "goods available near the place in future" it's used
        For example at 1 Jul customer is searching for 234 "pizza mozarella" and 234 bunches of flowers and want to pickup itself
        near Nikl subway station at 11 Jul. There is small pizzeria near that place and another and flower's store is  far away,
        but webstore can ensure this order.
      </p>
      <p>Goods is listed in store always if it's either available now or (may be) in future.</p>
      <p>Model GoodsAvailable:
          <li>goods - InvItem, not null.</li>
          <li>pickUpPlace - PickUpPlace, not null.</li>
          <li>sinceDate - Date, not null.</li>
          <li>isAlways - Boolean, not null, false default - switch method <b>Always available</b>.</li>
  +        <li>itsQuantity - BigDecimal, more or equals zero, if isAlways=true then must be more than zero
            cause performance optimization (filter only "quantity>0").</li>
          {goods, pickUpPlace} is PK.
      </p>
      <p>Model PickUpPlace for goods means where it is located, e.g. for small store there is only place e.g. "shop".
        For a service it means either where is service performed (e.g. haircut saloon) or
        service maker/s location (for services that performed in the buyer territory e.g. fix faucet by plumber).
        It's used for goods/service availability and can be used for buyer that prefer pick up goods/get service at chosen place:
        <ul>
          <li>AHasNameIdLongVersion fields (ID by hand)</li>
          <li>description - String.</li>
          <li>latitude - BigDecimal if used</li>
          <li>longitude - BigDecimal if used</li>
          <li>timeZone - Integer, Time zone GMT+ minutes if used</li>
        </ul>
      </p>
      <p>To improve performance for customer that did not prefer any pickUpPlace (he prefer delivery) it's used SQL subquery
      that select only (with maximum quantity) GoodsAvailable:
        <pre>
          select GOODS, max(QUANTITY) as QUANTITY from GOODSAVAILABLE where SINCEDATE&lt;=1124584544411 group by GOODS having max(QUANTITY)>0
        </pre>
      </p>
      <p>Any service that increase quantity of available goods could invoke method <b>registerIncrease(goods, warehouseSite)</b>
        in service ISrvIncreaseGoods, where warehouseSite used instead warehouse for addition logic like
        "goods in that warehouseSite is not available for web-store". For example this service can be invoked during making <b>Manufacture</b>.
        But it can be <b>bulk register</b> that made by an operator or automatically by scheduler at scheduled time
        by using new unregistered documents. It can be used also <b>ISrvAvailableGoods</b> that set quantity according
        warehouse.
      </p>

      <h4>Availability of service.</h4>
      <p>If customer prefer concrete service-maker then service availability is binary - available or not at the time.
        Otherwise if service can be made by several service-makers then availability is summarized. 
      </p>
      <p>A service can be always available, e.g. "nice packaging" even though it depends of availability of materials,
        if business-makers can make sure availability then this method can be used.</p>
      <p>Main availability of service method is schedule. Common approach is to add service-maker name to service method,
      then make availability schedule.
      Services schedule depends of service, e.g. room rent - daily, haircut - hourly.</p>
      
      <h4>Improving performance.</h4>
      <p>Model persistable ItemInList:
        <ul>
          <li>AHasNameIdLongVersion fields</li>
          <li>itemId - Long, Goods/Service/SEGoods/SEService ID, not null.</li>
          <li>itsType - EShopItemType, not null.</li>
          <li>imageUrl - String, image URL if exist</li>
          <li>specificInList - String, if exist, addition to name, max length = 500, usually HTML string that briefly describes item.</li>
          <li>itsRating - Integer, goods's rating if exist.</li>
          <li>seSeller - SeSeller, S.E. seller if exist.</li>
          <li>seSellerRating - Integer, S.E. seller's rating if exist.</li>
          <li>itsPrice - BigDecimal, null if auctioned, if TradingSettings.isUsePriceForCustomer=false then it should be updated with changing GoodsPice,
            otherwise it should be retrieved by additional SQL query according BuyerPriceCategory when customer is requesting.
          </li>
          <li>previousPrice - BigDecimal, null if auctioned, if TradingSettings.isUsePriceForCustomer=false then it should be updated with changing GoodsPice,
            otherwise it should be retrieved by additional SQL query according BuyerPriceCategory when customer is requesting.
          </li>
     +     <li>availableQuantity - BigDecimal, more or equals 0, it's sum of all GoodsAvailable,
            so it's updated with changing GoodsAvailable. If it zero then row not present in list.
            If customer use filter "available since" and/or "pickup place" then it's used inner join - additional SQL query
            of GoodsAvailable with place filter. Auctioning goods has quantity 1 settled by GoodsAuction, when auction is end quantity settled to 0.
          </li>
          <b>auctioned goods fields:</b>
          <li>dateStartAuc - Date, date start.</li>
          <li>dateEndAuc - Date, date end.</li>
          <li>startPriceAuc - BigDecimal, start price.</li>
          <li>minimumPriceAuc - BigDecimal, minimum price that seller will accept.</li>
          <li>buyItNowPriceAuc - BigDecimal, buy it now price, if applied.</li>
          <li>currentPriceAuc - BigDecimal, default=0, current price.</li>
          <li>soldPriceAuc - BigDecimal, if sold.</li>
          <li>totalBidsAuc - Integer, default=0, totalBids.</li>
          <li>isEndedAuc - Boolean, default=false</li>
          <li>isSoldAuc - Boolean, default=false</li>
          <li>detailsMethod - Integer, method to render details (page), NULL - no detail page.</li>
        </ul>
      </p>
      <p>This is simple model that contains of full HTML appearance of goods/service in the list (page), i.e.
        after admin fill out all specifics it must update this, and so does goods price, rating etc.
        So retrieving list of goods/services is not expensive. This model allows both goods and services
        to be listed in the same list for both standard and auction selling.
      </p>
      <p>This model is maintained by invoking by hand <b>menu-refresh items list</b> after admin or S.E. seller has been changed
        goods specifics, price etc. All models has <b>itsVersion=last update date</b>, so it's not too expensive and it will update only outdated items.
        It's also update only dedicated types of items, e.g. only goods/services belonging to S.E. seller who invoke refresh.
        Statistics specifics like goods/service/seller rating is checked/updated either automatically when customer give mark or by admin.
      </p>
      <p>
        queries for check own goods to update items list is very easy of each goods characteristic - specific, price,
        availability is done by retrieveListWithConditions where conditions is:
        <pre>
where ITSVERSION>:LASTUPDATEDVERSION
order by ITSVERSION;
        </pre>
        where :LASTUPDATEDVERSION is equals max(ITSVERSION) of characteristic from previous update transaction
      </p>
      <p>
        In case of big data it's used [N]-records per transaction method, e.g. if total needed to update GoodsSpecific
        is 10000, then they processed in cycle per 100 records. There is SettingsAdd.recordsPerTransaction=100 by default.
        So processor that handle this is transactional, but request handler is not - SimpleRequestHandler.
      </p>
      <p>In case customer do not use filter "available since" and/or "pickup place" and TradingSettings.isUsePriceForCustomer=false
        this model contains actual information, so no need make additional SQL requests (price for customers category).
      </p>
      <p>
    Sub-query for own goods in selected catalog when auctioning is not used in webstore/goodsInListForCatalogNotAucSamePrice.sql:
<pre style="white-space: pre-wrap;">
select ITSTYPE, ITEMID, ITSNAME, IMAGEURL, SPECIFICINLIST, ITSPRICE, PREVIOUSPRICE, AVAILABLEQUANTITY, ITSRATING, DETAILSMETHOD
from (
  select ITSTYPE, ITEMID, ITSNAME, IMAGEURL, SPECIFICINLIST, ITSPRICE, PREVIOUSPRICE, AVAILABLEQUANTITY, ITSRATING, DETAILSMETHOD
  from ITEMINLIST
  where AVAILABLEQUANTITY>0 and ITSTYPE=0 :WHEREADD
 ) as ALLGOODS
join (
  select distinct GOODS as GOODSINCATALOG from GOODSCATALOGS where ITSCATALOG :CATALOGFILTER
 ) as GOODSINCATALOGALL on GOODSINCATALOGALL.GOODSINCATALOG=ALLGOODS.ITEMID
</pre>
where :CATALOGFILTER is ID of selected catalog or "catalog on start" or set of catalogs, e.g. "=1" or "in (12, 14, 67)".
      </p>
      <p>
        Whole query that may has filter and order clause. It may consist of only that single sub-query if
        it's only own goods store with no auctioning, and price same for all customers and user didn't choose filter/order.
      </p>
            
      <h4>WEB-interface</h4>
      <p>It based on <a href="http://getbootstrap.com/">bootstrap</a>.
        There is only interface for both desktop and mobile device.
      </p>
      
      <p>Models that passed to JSP for rendering page of goods or services:
        <ul>
          <li>itemsList - List&lt;ItemInList&gt;</li>
          <li>totalItems - row count</li>
          <li>pages - List&lt;org.beigesoft.model.Page&gt; if exist</li>
        </ul>
      </p>

      <h6>List on start</h6>
      <p>In case of little catalog TradingSettings has catalogOnStart to list all goods on start without clicking on "menu-[catalog]".
      Or it's catalog that offers different goods/services for all on start</p>
      <p>TODO At start it could be sets of goods that previous have been seen/bought by customer and/or advising goods for any reason.
        Model persistable OfferedGoodsOnStart:
        <ul>
          
        </ul>
        Model non-persistable OffersOnStart (goods and/or services):
        <ul>
          
        </ul>
      </p>
      
      <h5>Menu</h5>
      <p>It consist of:
        <ul>
          <li>WEB-store Logo if TradingSettings.isShowLogo - file static/img/logo-web-store.png, this is home link</li>
          <li>WEB-store name from TradingSettings.webStoreName if it's not empty, this is home link</li>
          <li>catalogs 1-st level</li>
          <li>filter if present</li>
          <li>Shopping cart</li>
          <li>Log in/out</li>
          <li>about page - file webStoreAbout.jsp that contains information about business owner and Beigesoft that MUST NOT BE REMOVED.
            Full customized main page must has link to Beigesoft.
          </li>
        </ul>
      </p>
      
      <p>Public not require authorization) request handlers (that can be invoked through public servlet WServicePublic):
        <ul>
          <li>hndPubWebStrTr of type TransactionalRequestHandler can invoke only WEB-store public processors
          (WEB-store admin and SE sellers use another request handlers).</li>
        </ul>
      </p>
    </section>

  </body>

</document>
