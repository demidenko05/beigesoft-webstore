<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Beigesoft™ WEB Store. Services selling.</title>
   </properties>

  <body>

    <section name="Beigesoft™ WEB Store. Services selling.">
      
      <h4>General information</h4>
      <p>Service can be ordered by time or time range, e.g.
        <ul>
          <li>yoga class at 11/11/18 (buyer can order only lesson), this service performed 1 time a day, hours may be changed day by day,
            i.e. only "day" is used for booking and filtering.
            Daily hours is just information that should be added either in the title (service name) or as dynamic specifics (filterable or not).</li>
          <li>yoga class at 11/11/18 (buyer can order minimum 30 lessons).</li>
          <li>taxi at 11/11/18, 11:15AM</li>
          <li>doctor appointment at 11/11/18, 11:15AM</li>
          <li>car fixing at 11/11/18, 11:15AM</li>
          <li>hotel room from 11/11/18 till 11/21/18, daily</li>
          <li>hotel room from 11/11/18, 02:00PM till 11/11/18, 04:00PM, hourly</li>
          <li>apartment from 01/01/18, till 06/01/18, monthly</li>
        </ul>
        this characteristic is service's hard coded property.
      </p>
      <p>Some of services do not require booking and they are always available, e.g. "shipping and handling", "pizza delivering".</p>
      <p>Booking a service means reservation from Date1 (include) till Date2(exclude). E.g. doctor appointment at "11/11/18, 09:00AM" that scheduled as hourly, i.e. till 10:00AM.
        Taxi from "11/11/18, 09:00PM" from point A to B, estimated time is 2 hours, so till "11:00PM".
        In second case it must be generic algorithm to estimate time,
        it's implements as ordinal service that can be changed during runtime (replaced with new service class loaded by dedicated factory-class-loader).
        Service maker can changes automatically created "service busy" record.
      </p>
      <p>Second characteristics is service place that is also hard coded.
      Another - service maker and its rating (hard coded). All others dynamically added specifics - taxi car body type, number of rooms.</p>
      <p>Maximum book date must be restricted, i.e. "11/11/3011" is not available to pick. It also depends of service.
        SettingsAdd.daOf - days all services offered from now 365 default, restrict this in data picker, availability registers will filter list.</p>
      
      <h4>Base data models</h4>
      <p>EServTime - service booking time method:
        <ul>
          <li>TIME</li>
          <li>HOUR</li>
          <li>DAY</li>
          <li>MONTH</li>
          <li>TIMERANGE</li>
          <li>HOURRANGE</li>
          <li>DAYRANGE</li>
          <li>MONTHRANGE</li>
          <li>NONE - do not require booking</li>
        </ul>
        This used for making filter and booking service.
        Chosen time maybe restricted (e.g. by schedule), e.g. "13:00" and "13:15" are available to choose, but "13:10" - not.
        Any way "13:01:15" is not applicable at all.
        Service has additional property <b>tmAd</b> is used as minutes step from zero (divisible to 60, e.g. only 5, 10, 15, 20, 30) that used for services with "*TIME*" type,
        or as minutes offset for "*DAY*" ones.
      </p>
      <p>Database model ServiceToSale (Accounting package):
        <ul>
          <li>extends AItem&lt;ServiceToSale, DestTaxServSelLn&gt; implements IPersistableBase</li>
          <li>tmMe - EServTime, not null, default TIME, booking time method</li>
          <li>tmAd - Integer, nullable, additional time method, e.g. step from zero in minutes (5/10/15/20/30) for tmMe=="*TIME*"</li>
          <li>itsCategory - ServiceToSaleCategory, not null</li>
          <li>destinationTaxes - List&gt;DestTaxServSelLn&lt;</li>
        </ul>
      </p>

      <h4>Service in catalog</h4>
      <p>Model ServiceCatalog:
        <ul>
          <li>itsCatalog - CatalogGs, not null, its hasSubcatalogs=false.</li>
          <li>service - ServiceToSale, not null.</li>
        </ul>
        Pair {"service", "itsCatalog"} is primary key
      </p>

      <h4>Specifics of service</h4>
      <p>It is made in same way as goods specifics.</p>
      <p>Model ServiceSpecifics, e.g. "Room for rent" "Room size = 17m3":
        <ul>
          <li>service - ServiceToSale, not null</li>
          <li>specifics - SpecificsOfItem, not null</li>
          <li>numericValue1 - BigDecimal, if present</li>
          <li>numericValue2 - BigDecimal, if present</li>
          <li>longValue1 - Long, if present</li>
          <li>longValue2 - Long, if present</li>
          <li>stringValue1 - String, if present</li>
          <li>stringValue2 - String, if present</li>
          <li>stringValue3 - String, if present</li>
          <li>stringValue4 - String, if present</li>
        </ul>
        Pair {"service", "specifics"} is primary key
      </p>

      <h4>Service makers.</h4>
      <p>A service can be offered by many S.E. Sellers and web-store owner, e.g. "Cleaning".
        These services have different specifics and even name. It's used SeGoods and SeService to isolate services and goods belonging to S.E.Sellers.
        It can be used chooseable specifics - "Service type" to name service and use in filter, e.g. "Taxi", "Room for rent daily". Or it can be used catalogs in case of a lot of offered services.
      </p>
      <p>Model SeServiceCatalog:
        <ul>
          <li>itsCatalog - CatalogGs, not null, its hasSubcatalogs=false.</li>
          <li>service - SeService, not null.</li>
        </ul>
        Pair {"service", "itsCatalog"} is primary key
      </p>
      <p>Model SeServiceSpecifics, e.g. "Room for rent" "Room size = 17m3":
        <ul>
          <li>service - SeService, not null</li>
          <li>specifics - SpecificsOfItem, not null</li>
          <li>numericValue1 - BigDecimal, if present</li>
          <li>numericValue2 - BigDecimal, if present</li>
          <li>longValue1 - Long, if present</li>
          <li>longValue2 - Long, if present</li>
          <li>stringValue1 - String, if present</li>
          <li>stringValue2 - String, if present</li>
          <li>stringValue3 - String, if present</li>
          <li>stringValue4 - String, if present</li>
        </ul>
        Pair {"service", "specifics"} is primary key
      </p>
      
      <h4>Availability of service</h4>
      <p>Common way is listing of all offered services, then buyer can filter list with desired needs (e.g. a room in a city for required days).</p>
      <p>It should be implemented these availability methods:
        <ul>
          <li><i>Implemented with PickUpPlace and EPlaceFilterType:</i></li>
          <li>Available around a place, e.g. 20km around a city center for a taxi driver</li>
          <li>Available at a place/places, e.g. at a airport and a city for a taxi driver</li>
          <li>Available around time zone, e.g. GMT+3 for a remote math tutor.</li>
          <li><i>Implemented with EDateFilterType:</i></li>
          <li>Available from day start till day end - common filter to book hotel room</li>
          <li>Available from time start till time end - common filter to book a hair cut</li>
          <li>Available at time - common filter to book a taxi</li>
        </ul>
      </p>
      <p>Model ServicePlace:
        <ul>
          <li>AItemPlace fields</li>
          <li>service - Service, not null</li>
          <li>pickUpPlace - PickUpPlace, not null</li>
          <li>distance - Long, if present in hundred meters, i.e. 1 means 100meters</li>
        </ul>
        Pair {"service", "pickUpPlace"} is primary key
        itsQuantity initially is set by service maker. Grater than 0 will list service in catalog without used availability filter.
        Initial value 0 means service not available it all and never be listed.
        itsQuantity is made dynamically for chosen time/time range according availability registers when filter availability is applied.
      </p>
      <p>If there is any ServicePlace for a service then it will be listed in its catalog.</p>
      <p>Model SerBus - service busy from till time: 
        <ul>
          <li>AHasIdLongVersion (autogenerated ID) fields</li>
          <li>serv - ServiceToSale, not null</li>
          <li>frTm - Date, not null, busy from time (include)</li>
          <li>tiTm - Date, not null, busy till time (exclude)</li>
        </ul>
        New records from-till must overwrite old (in past time) ones to improve performance.
      </p>
      <p>Model SeSerBus - S.E. service from till time: 
        <ul>
          <li>AHasIdLongVersion (autogenerated ID) fields</li>
          <li>serv - SeService, not null</li>
          <li>frTm - Date, not null, from time</li>
          <li>tiTm - Date, not null, till time</li>
        </ul>
      </p>
      <h4>Availability registers:</h4>
      <p>Model SerSch, schedule of service:
        <ul>
          <li>AHasIdLongVersion (autogenerated ID) fields</li>
          <li>serv- ServiceToSale, not null</li>
          <li>frTm - Date, not null, from time, e.g. 9:30AM</li>
          <li>tiTm - Date, not null, till time, e.g. 5:30PM</li>
          <li>range - Integer, not null, period in minutes, e.g. 60</li>
          <li>frDay - Integer, not null, from day of week, e.g. 1 - Monday</li>
          <li>tiDay - Integer, not null, till day of week, e.g. 7 - Sunday</li>
        </ul>
      </p>
      <p>From scratch, a service available all time.
      To make a service unavailable at a data range (busy or not-working time) add this range in SerBus.</p>
      <p>SerSch is used to implement booking with schedule form, e.g. appointment to a doctor. This table is not useful for services like taxi, cleaning, room renting.</p>

      <h4>Implementation of filtering services available from till day/time 20km around chosen place (e.g. a city)</h4>
      <p>
<pre style="white-space: pre-wrap;">
select ITSTYPE, ITEMID, ITSNAME, IMAGEURL, SPECIFICINLIST, ITSPRICE, PREVIOUSPRICE, AVAILABLEQUANTITY, ITSRATING, DETAILSMETHOD
from (
  select ITSTYPE, ITEMID, ITSNAME, IMAGEURL, SPECIFICINLIST, ITSPRICE, PREVIOUSPRICE, AVAILABLEQUANTITY, ITSRATING, DETAILSMETHOD
  from ITEMINLIST
  where AVAILABLEQUANTITY>0 and ITSTYPE=1
 ) as ALLSERVICES
join (
  select distinct SERVICE
  from SERVICEPLACE
  where PICKUPPLACE=1 and DISTANCE&lt;=200
 ) as SERVICEPLACE on SERVICEPLACE.SERVICE=ALLSERVICES.ITEMID
join (
  select distinct SERVICE
  from SERVICECATALOG
  where ITSCATALOG in (2, 3, 4)
 ) as SERVICEINCATALOGALL on SERVICEINCATALOGALL.SERVICE=ALLSERVICES.ITEMID
left join (select distinct SERV
  from SERBUS
  where FRTM&gt;=:DT1 and and TITM&lt;:DT2
 ) as SERBUS on SERBUS.SERV=ALLSERVICES.ITEMID
where SERVBUSY.SERV is null
</pre>
      </p>
      <h4>Checking out service availability on booking range "date1-date2"</h4>
      <p>
<pre style="white-space: pre-wrap;">
select ITEM, ITSQUANTITY, DISTANCE, PICKUPPLACE from SERVICEPLACE
left join (
 select distinct SERV from SERBUS where SERV=:SEID and FRTM&gt;=:DT1 and TITM&lt;:DT2
) as SERBUS on SERBUS.SERV=SERVICEPLACE.ITEM where ITEM=:SEID and ITSQUANTITY>0 and SERBUS.SERV is null;
</pre>
      </p>

      <h4>Example of hotel room booking</h4>
      <p>There is dedicated for this catalog "Hotel renting"</p>
      <p>This service offered with <b>From till day</b> booking method (DAYRANGE).</p>
      <li>Additional characteristics "check in/out time" ... are specifics.</li>
      <p>Catalog may list all rooms without availability filter. Buyer can uses other filter of course (place, hotel rating, etc).</p>
      <p>Room in list or detail page is available for booking only when filter "availability" is applied.</p>
      <p>Checkout service will check availability again and if it's available, add record in "ServiceBusy", otherwise cancel checkout, i.e. buyer should fix its cart.</p>
      <p>Service maker can adds by hand unavailable records in "SerBus" register, e.g. room A renovation from time "11/11/2018, 12:00AM" till "11/21/18, 12:00AM".</p>

    </section>

  </body>

</document>
