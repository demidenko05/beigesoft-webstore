<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Beigesoft™ WEB Store. Services selling.</title>
   </properties>

  <body>

    <section name="Beigesoft™ WEB Store. Services selling.">
      
      <h4>Service in catalog</h4>
      <p>Model ServiceCatalog:
        <ul>
          <li>itsCatalog - CatalogGs, not null, its hasSubcatalogs=false.</li>
          <li>service - ServiceToSale, not null.</li>
        </ul>
        Pair {"service", "itsCatalog"} is primary key
      </p>

      <h4>Specifics of service</h4>
      <p>It is made in same way as goods specifics.</p>
      <p>Model ServiceSpecifics, e.g. "Room for rent" "Room size = 17m3":
        <ul>
          <li>service - ServiceToSale, not null</li>
          <li>specifics - SpecificsOfItem, not null</li>
          <li>numericValue1 - BigDecimal, if present</li>
          <li>numericValue2 - BigDecimal, if present</li>
          <li>longValue1 - Long, if present</li>
          <li>longValue2 - Long, if present</li>
          <li>stringValue1 - String, if present</li>
          <li>stringValue2 - String, if present</li>
          <li>stringValue3 - String, if present</li>
          <li>stringValue4 - String, if present</li>
        </ul>
        Pair {"service", "specifics"} is primary key
      </p>

      <h4>Service makers.</h4>
      <p>A service can be offered by many S.E. Sellers and web-store owner, e.g. "Cleaning".
        These services have different specifics and even name. It's used SeGoods and SeService to isolate services and goods belonging to S.E.Sellers.
        It can be used chooseable specifics - "Service type" to name service and use in filter, e.g. "Taxi", "Room for rent daily". Or it can be used catalogs in case of a lot of offered services.
      </p>
      <p>Model SeServiceCatalog:
        <ul>
          <li>itsCatalog - CatalogGs, not null, its hasSubcatalogs=false.</li>
          <li>service - SeService, not null.</li>
        </ul>
        Pair {"service", "itsCatalog"} is primary key
      </p>
      <p>Model SeServiceSpecifics, e.g. "Room for rent" "Room size = 17m3":
        <ul>
          <li>service - SeService, not null</li>
          <li>specifics - SpecificsOfItem, not null</li>
          <li>numericValue1 - BigDecimal, if present</li>
          <li>numericValue2 - BigDecimal, if present</li>
          <li>longValue1 - Long, if present</li>
          <li>longValue2 - Long, if present</li>
          <li>stringValue1 - String, if present</li>
          <li>stringValue2 - String, if present</li>
          <li>stringValue3 - String, if present</li>
          <li>stringValue4 - String, if present</li>
        </ul>
        Pair {"service", "specifics"} is primary key
      </p>
      
      <h4>Availability of service</h4>
      <p>Common way is listing of all offered services, then buyer can filter list with desired needs (e.g. a room in a city for required days).</p>
      <p>It should be implemented these availability methods:
        <ul>
          <li><i>Implemented with PickUpPlace and EPlaceFilterType:</i></li>
          <li>Available around a place, e.g. 20km around a city center for a taxi driver</li>
          <li>Available at a place/places, e.g. at a airport and a city for a taxi driver</li>
          <li>Available around time zone, e.g. GMT+3 for a remote math tutor.</li>
          <li><i>Implemented with EDateFilterType:</i></li>
          <li>Available from day start till day end - common filter to book hotel room</li>
          <li>Available from time start till time end - common filter to book a hair cut</li>
          <li>Available at time - common filter to book a taxi</li>
        </ul>
      </p>
      <p>Model ServicePlace:
        <ul>
          <li>AItemPlace fields</li>
          <li>service - Service, not null</li>
          <li>pickUpPlace - PickUpPlace, not null</li>
          <li>distance - Long, if present in hundred meters, i.e. 1 means 100meters</li>
        </ul>
        Pair {"service", "pickUpPlace"} is primary key
      </p>
      <p>If there is any ServicePlace for a service then it will be listed in its catalog.</p>
      <p>Model ServBusy - service in place busy from till time: 
        <ul>
          <li>AHasIdLongVersion (autogenerated ID) fields</li>
          <li>serv - ServiceToSale, not null</li>
          <li>place - PickUpPlace, not null</li>
          <li>fromTime - Date, not null</li>
          <li>tillTime - Date, not null</li>
        </ul>
        New records from-till must overwrite old (in past time) ones to improve performance.
      </p>
      <p>Model ServSchedule:
        <ul>
          <li>AHasIdLongVersion (autogenerated ID) fields</li>
          <li>serv- ServiceToSale, not null</li>
          <li>place - PickUpPlace, not null</li>
          <li>frTm - Date, not null, e.g. 9:30AM</li>
          <li>tiTm - Date, not null, till time, e.g. 5:30PM</li>
          <li>rangeMin - Integer, not null, period in minutes, e.g. 60</li>
          <li>frDay - Integer, not null, day of week, e.g. 1 - Monday</li>
          <li>tiDay - Integer, not null, day of week, e.g. 7 - Sunday</li>
        </ul>
      </p>
      <p>From scratch, a service available all time.
      To make a service unavailable at a data range (busy or not-working time) add this range in ServBusy.</p>
      <p>ServSchedule is used to implement booking with schedule form, e.g. appointment to a doctor. This table not useful for services like taxi, cleaning, room renting.</p>

      <h4>Implementation of filtering services available from till day/time 20km around chosen place (e.g. a city)</h4>
      <p>
<pre>
select ITSTYPE, ITEMID, ITSNAME, IMAGEURL, SPECIFICINLIST, ITSPRICE, PREVIOUSPRICE, AVAILABLEQUANTITY, ITSRATING, DETAILSMETHOD
from (
  select ITSTYPE, ITEMID, ITSNAME, IMAGEURL, SPECIFICINLIST, ITSPRICE, PREVIOUSPRICE, AVAILABLEQUANTITY, ITSRATING, DETAILSMETHOD
  from ITEMINLIST
  where AVAILABLEQUANTITY>0 and ITSTYPE=1
 ) as ALLSERVICES
join (
  select distinct SERVICE
  from SERVICEPLACE
  where PICKUPPLACE=1 and DISTANCE&lt;=200
 ) as SERVICEPLACE on SERVICEPLACE.SERVICE=ALLSERVICES.ITEMID
join (
  select distinct SERVICE
  from SERVICECATALOG
  where ITSCATALOG in (2, 3, 4)
 ) as SERVICEINCATALOGALL on SERVICEINCATALOGALL.SERVICE=ALLSERVICES.ITEMID
left join (select distinct SERVICE
  from SERVBUSY
  where PLACE=1 and ((FROMDAY>=:DATE1 and FROMDAY&lt;:DATE2) or (TILLDAY>:DATE1 and TILLDAY&lt;=:DATE2))
 ) as SERVBUSY on SERVBUSY.SERVICE=ALLSERVICES.ITEMID
where SERVBUSY.SERVICE is null
</pre>
      </p>

    </section>

  </body>

</document>
