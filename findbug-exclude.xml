<?xml version="1.0" encoding="UTF-8"?>
<FindBugsFilter>
  <!--Getting name is happened very frequency (e.g. 10 per second by multi-threads).
    Setting is seldom (e.g. hot change configuration to fix program bug) or may not be happen.-->
  <Match>
     <Class name="org.beigesoft.webstore.holder.HldTradeProcessorNames" />
     <Bug pattern="UG_SYNC_SET_UNSYNC_GET" />
  </Match>
  <!--See beigesoft-common test DoubleCkeckLockingRiApTest. Assigning fully
  initialized bean to the class variable is reliable method.-->
  <Match>
     <Class name="org.beigesoft.webstore.processor.PrcWebstorePage" />
     <Bug pattern="DC_DOUBLECHECK" />
  </Match>
  <!--Catalog is well synchronized cause double check-->
  <Match>
     <Class name="org.beigesoft.webstore.processor.PrcWebstorePage" />
     <Bug pattern="IS2_INCONSISTENT_SYNC" />
  </Match>
  <!--EI_EXPOSE_REP/2 is resource unfriendly approach to avoid object's unexpected changes.
  In real program the most of objects (not only Date and arrays) is mutable.
  These are also POJO-unfriendly rules.
  Using annotation "immutable" is the best way to implements logic: "do not change
  mutable object outside or better - by annotated allowChangeImmutableFor[]".-->
  <Match>
     <Class name="org.beigesoft.webstore.persistable.ItemInList" />
     <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
     <Class name="org.beigesoft.webstore.persistable.ItemInList" />
     <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
</FindBugsFilter>
